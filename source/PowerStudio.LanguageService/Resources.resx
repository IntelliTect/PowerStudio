<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BuiltInVariables" xml:space="preserve">
    <value>global:
local:
private:
script:
$args
$ConsoleFileName
$Error
$Event
$EventSubscriber
$ExecutionContext
$false
$foreach
$Home
$Host
$input
$LastExitCode
$matches
$MyInvocation
$NestedPromptLevel
$null
$PID
$PsBoundParameters
$PsCmdlet
$PsCulture
$PsDebugContext
$PsHome
$PsScriptRoot
$PsUICulture
$PsVersionTable
$Pwd
$Sender
$ShellID
$SourceArgs
$SourceEventArgs
$switch
$this
$true</value>
  </data>
  <data name="CmdLets" xml:space="preserve">
    <value>ForEach-Object
Where-Object
Add-Content
Add-PSSnapIn
Get-Content
Set-Location
Set-Location
Clear-Content
Clear-Host
Clear-History
Clear-Item
Clear-ItemProperty
Clear-Host
Clear-Variable
Compare-Object
Copy-Item
Copy-Item
Copy-Item
Copy-ItemProperty
Convert-Path
Disable-PSBreakpoint
Remove-Item
Compare-Object
Get-ChildItem
Enable-PSBreakpoint
Write-Output
Export-Alias
Export-Csv
Export-PSSession
Remove-Item
Enter-PSSession
Exit-PSSession
Format-Custom
Format-List
ForEach-Object
Format-Table
Format-Wide
Get-Alias
Get-PSBreakpoint
Get-Content
Get-ChildItem
Get-Command
Get-PSCallStack
Get-PSDrive
Get-History
Get-Item
Get-Job
Get-Location
Get-Member
Get-Module
Get-ItemProperty
Get-Process
Group-Object
Get-PSSession
Get-PSSnapIn
Get-Service
Get-Unique
Get-Variable
Get-WmiObject
Get-History
Get-History
Invoke-Command
Invoke-Expression
Invoke-History
Invoke-Item
Import-Alias
Import-Csv
Import-Module
Import-PSSession
powershell_ise.exe
Invoke-WMIMethod
Stop-Process
Out-Printer
Get-ChildItem
help
mkdir
Measure-Object
Move-Item
New-PSDrive
Move-Item
Move-ItemProperty
Move-Item
New-Alias
New-PSDrive
New-Item
New-Module
New-PSSession
New-Variable
Out-GridView
Out-Host
Pop-Location
Get-Process
Push-Location
Get-Location
Invoke-History
Remove-PSBreakpoint
Receive-Job
Remove-Item
Remove-PSDrive
Rename-Item
Remove-Item
Remove-Job
Remove-Item
Remove-Item
Remove-Module
Rename-Item
Rename-ItemProperty
Remove-ItemProperty
Remove-PSSession
Remove-PSSnapin
Remove-Variable
Resolve-Path
Remove-WMIObject
Start-Job
Set-Alias
Start-Process
Start-Service
Set-PSBreakpoint
Set-Content
Select-Object
Set-Variable
Set-Item
Set-Location
Start-Sleep
Sort-Object
Set-ItemProperty
Stop-Job
Stop-Process
Stop-Service
Start-Process
Set-Variable
Set-WMIInstance
Tee-Object
Get-Content
Where-Object
Wait-Job
Write-Output</value>
  </data>
  <data name="Keywords" xml:space="preserve">
    <value>begin
break
catch
class
continue
data
define
dynamicparam
else
elseif
exit
filter
finally
foreach
from
function
param
process
return
switch
throw
trap
until
using
while</value>
  </data>
  <data name="PreferenceVariables" xml:space="preserve">
    <value>$ConfirmPreference
$DebugPreference
$ErrorActionPreference
$ErrorView
$FormatEnumerationLimit
$MaximumAliasCount
$MaximumDriveCount
$MaximumErrorCount
$MaximumFunctionCount
$MaximumHistoryCount
$MaximumVariableCount
$OFS
$OutputEncoding
$ProgressPreference
$VerbosePreference
$WarningPreference
$WhatIfPreference</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="ProjectIcon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>ProjectIcon.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
</root>